<?php

require_once drupal_get_path('module', 'unl') . '/includes/common.php';
require_once __DIR__ . '/unl_cas_smart_cache.php';

/**
 * Implements hook_enable().
 */
function unl_cas_enable() {
  variable_set('user_register', 0);
}

/**
 * Implements hook_init().
 */
function unl_cas_init() {
  // If no one is claiming to be logged in while no one is actually logged in, we don't need CAS.
  if (!array_key_exists('unl_sso', $_COOKIE) && user_is_anonymous()) {
    return;
  }

  // Don't do any logins on the my.unl.edu page.
  if (request_path() == 'myunl') {
    return;
  }

  // The current request is to the validation URL, we don't want to redirect while a login is pending.
  if (request_path() == 'user/cas') {
    return;
  }

  // If the user is logged in with shib_auth, don't do CAS.
  if (!user_is_anonymous() && isset($_SESSION['shib_auth_username'])) {
    return;
  }

  // If the user's CAS service ticket is expired, and their drupal session hasn't,
  // redirect their next GET request to CAS to keep their CAS session active.
  // However, if their drupal session expired (and they're now anonymous), redirect them regardless.
  $cas = unl_cas_get_adapter();
  $isTicketExpired = $cas->getProtocol()->validateTicket($cas->getTicket(), $cas->getURL());
  if ($isTicketExpired && ($_SERVER['REQUEST_METHOD'] == 'GET' || user_is_anonymous())) {
    $cas->getProtocol()->gateway = true;
    unset($_GET['destination']);
    $cas->forceAuthentication();
  }
}

/**
 * Sets up an instance of SimpleCAS
 *
 * @return SimpleCAS
 */
function unl_cas_get_adapter() {
  static $adapter;
  if (!$adapter) {
    if (variable_get('https', FALSE)) {
      $url = url('user/cas', array('absolute' => TRUE, 'query' => drupal_get_destination(), 'https' => TRUE));
    } else {
      $url = url('user/cas', array('absolute' => TRUE, 'query' => drupal_get_destination()));
    }

    require_once __DIR__ . '/../../libraries/SimpleCAS/Autoload.php';
    require_once __DIR__ . '/../../libraries/Net/URL2.php';
    require_once __DIR__ . '/../../libraries/HTTP/Request2.php';
    $options = array('hostname' => 'shib.unl.edu',
      'port'     => 443,
      'uri'      => 'idp/profile/cas');
    $protocol = new SimpleCAS_Protocol_Version2($options);
    $adapter = SimpleCAS::client($protocol);
    $adapter->setURL($url);
  }
  return $adapter;
}

/**
 * Implements hook_menu_site_status_alter().
 */
function unl_cas_menu_site_status_alter(&$menu_site_status, $path) {
    // Allow access to user/cas even if site is in offline mode.
    if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && $path == 'user/cas') {
        $menu_site_status = MENU_SITE_ONLINE;
    }
}

/**
 * Implements hook_menu().
 */
function unl_cas_menu() {
  $items['user/cas'] = array(
    'title'           => 'UNL CAS Validation',
    'page callback'   => 'unl_cas_validate_ticket',
    'access callback' => TRUE,
  );

  $items['admin/people/import'] = array(
    'title'            => 'Import User from UNL Directory',
    'description'      => 'Import a user from the UNL Directory',
    'access arguments' => array('administer users'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('unl_cas_user_import'),
    'type'             => MENU_LOCAL_ACTION,
    'file'             => 'unl_cas.admin.inc',
    'weight'           => 1,
  );

  $items['admin/config/people/unl_cas'] = array(
    'title'            => 'UNL CAS',
    'description'      => 'Configure the UNL CAS module',
    'access callback'  => 'unl_user_is_administrator',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('unl_cas_config'),
    'file'             => 'unl_cas.admin.inc',
    'weight'           => 1,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function unl_cas_menu_alter(&$items) {
  $items['admin/people/create']['weight'] = 2;
  $items['admin/people/create']['title'] .= ' manually';
  $items['admin/people/create']['access arguments'] = array('administer permissions');

}

/**
 * Validates CAS ticket
 */
function unl_cas_validate_ticket() {
  $cas = unl_cas_get_adapter();

  if (array_key_exists('logoutRequest', $_POST)) {
    $cas->handleSingleLogOut();
  }

  $username = $cas->getProtocol()->validateTicket($cas->getTicket(), $cas->getURL());

  if ($username) {
    //Do logic for checking if we need to force varnish for this user...
    //This will set a cookie and redirect early if the user does not have an account... and won't make an account
    unl_cas_smart_cache_run_for_user($username);

    //Now load LDAP
    $user = unl_cas_import_user($username);
    if (!$user) {
      drupal_set_message('An error occured importing the user.', 'error');
    }

    if ($GLOBALS['user']->uid != $user->uid) {
      $GLOBALS['user'] = $user;
      user_login_finalize();
    }
  }
  else {
    if (!user_is_anonymous()) {
      $GLOBALS['user'] = drupal_anonymous_user();
      user_login_finalize();
    }
    setcookie('unl_sso', 'fake', time() - 60 * 60 * 24, '/', '.unl.edu');
  }

  $destination = drupal_get_destination();
  unset($_GET['destination']);
  $url_parts = explode('?', $destination['destination']);
  $options = array();
  if (isset($url_parts[1])) {
    parse_str($url_parts[1], $options);
  }
  drupal_goto($url_parts[0], array('query' => $options));
}

/**
 * Form pre-render handler used to redirect to a different page instead of
 * rendering the form.
 * @param $element
 */
function unl_cas_redirect($element) {
  if (isset($element['#unl_cas_destination'])) {
    drupal_goto($element['#unl_cas_destination']);
  }
  else {
    $cas = unl_cas_get_adapter();
    $cas->forceAuthentication();
  }
  return $element;
}

/**
 * Implements form validation for the user_login form and attempts a UNL LDAP login.
 * @param $form
 * @param $form_state
 */
function unl_cas_login_authenticate($form, &$form_state) {
  $username = trim($form_state['values']['name']);
  $password = trim($form_state['values']['pass']);

  try {
    $ldap_connection = ldap_connect(unl_cas_get_setting('ldap_uri'));
    if ($ldap_connection === FALSE) {
      throw new Exception('Unable to connect to the LDAP server');
    }
    ldap_set_option($ldap_connection, LDAP_OPT_PROTOCOL_VERSION, 3) or die('Unable to set LDAP protocol version');
    // Check for an actual connection.
    @ldap_start_tls($ldap_connection);
    if (ldap_errno($ldap_connection) == -1) {
      throw new Exception('Could not connect to LDAP Server', -1);
    }
    @ldap_bind($ldap_connection, 'uid=' . $username . ',ou=people,dc=unl,dc=edu', $password);

    $account = unl_cas_import_user($username);
    $form_state['uid'] = $account->uid;
  } catch (Exception $e) {
    // Do nothing.  This is just a good faith effort.
  }
}

/**
 * Implements hook_form_alter().
 */
function unl_cas_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $defaultValidatorIndex = array_search('user_login_final_validate', $form['#validate']);
    if ($defaultValidatorIndex !== FALSE) {
      // Insert the LDAP validator just before the "user_login_final_validate" validator
      $form['#validate'] = array_merge(
        array_slice($form['#validate'], 0, $defaultValidatorIndex),
        array('unl_cas_login_authenticate'),
        array_slice($form['#validate'], $defaultValidatorIndex)
      );
    } else {
      $form['#validate'][] = 'unl_cas_login_authenticate';
    }
    $cas = unl_cas_get_adapter();
    unset($_GET['destination']);
    $form['#pre_render'][] = 'unl_cas_redirect';
  }

  if ($form_id == 'user_profile_form') {
    if (isset($form['account']['name'])) {
      $form['account']['name']['#type'] = 'hidden';
    }

    $form['account']['pass']['#type'] = 'hidden';
    $form['account']['current_pass_required_values']['#type'] = 'hidden';
    $form['account']['current_pass']['#type'] = 'hidden';

    $form['picture']['#description'] = 'To change your picture, visit <a href="https://planetred.unl.edu/pg/profile/unl_' . $GLOBALS['user']->name . '">Planet Red</a>.';
    $form['picture']['picture_delete']['#type'] = 'hidden';
    $form['picture']['picture_upload']['#type'] = 'hidden';

    // Disable checking the current password when changing email.
    if ($validate_password_index = array_search('user_validate_current_pass', $form['#validate']) !== FALSE) {
      unset($form['#validate'][$validate_password_index]);
    }

    $form['#validate'][] = 'unl_cas_user_profile_form_validate';
  }

  if ($form_id == 'user_pass') {
    $form['message'] = array(
      '#prefix' => '<p>',
      '#markup' => t('To reset your password, go somewhere else!'),
      '#suffix' => '</p>'
    );

    unset($form['name']);
    unset($form['mail']);
    unset($form['actions']);
    $form['#validate'] = array();
    $form['#submit'] = array();

    $form['#unl_cas_destination'] = 'https://trueyou.nebraska.edu/SelfService/ForgotPassword.jsp';
    $form['#pre_render'][] = 'unl_cas_redirect';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Make sure there's no funny business with somebody trying to change a password when we're using CAS.
 */
function unl_cas_user_profile_form_validate(&$form, &$form_state, $form_id = '') {
  if ($form_state['values']['pass']) {
    form_set_error('current_pass', t('Password changes are not allowed when CAS is enabled!'));
  }
}

/**
 * Implements hook_user_logout().
 */
function unl_cas_user_logout($account) {
  session_destroy();
  $cas = unl_cas_get_adapter();
  unset($_GET['destination']);
  $cas->logout(url('<front>', array('absolute' => TRUE)));
}

function unl_cas_get_user_record($username) {
  $result = 0;
  // First, try getting the info from LDAP.
  try {
    $ldap_connection = ldap_connect(unl_cas_get_setting('ldap_uri'));
    if ($ldap_connection === FALSE) {
      throw new Exception('Unable to connect to the LDAP server');
    }
    ldap_set_option($ldap_connection, LDAP_OPT_PROTOCOL_VERSION, 3) or die('Unable to set LDAP protocol version');
    ldap_set_option($ldap_connection, LDAP_OPT_REFERRALS, 0); // We need this for doing an LDAP search.

    // Check for an actual connection.
    @ldap_start_tls($ldap_connection);
    if (ldap_errno($ldap_connection) == -1) {
      throw new Exception('Could not connect to LDAP Server', -1);
    }

    if (@ldap_bind($ldap_connection, unl_cas_get_setting('ldap_dn'), unl_cas_get_setting('ldap_password')) === TRUE) {
      $results = _unl_cas_ldap_search($ldap_connection, 'ou=people,dc=unl,dc=edu', 'sAMAccountName=' . $username);
      if (count($results) > 0) {
        $result = $results[0];
      }
    }
    else {
      throw new Exception('Unable to LDAP bind: ' . ldap_error($ldap_connection), ldap_errno($ldap_connection));
    }
  }
  catch (Exception $e) {
    // don't do anything, just go on to try the PeopleFinder method
  }

  // Next, if LDAP didn't work, try PeopleFinder service...
  $json = unl_url_get_contents('https://directory.unl.edu/service.php?format=json&uid=' . $username);
  $json_decode = json_decode($json, TRUE);
  if (!$result && $json) {
    $result = $json_decode;
  }
  // ...or, just use it to get NUID.
  else {
    $result['unluncwid'][0] = $json_decode['unluncwid'][0];
  }

  return $result;
}

/**
 * Generates and saves a user using info from LDAP or Directory
 */
function unl_cas_import_user($username) {
  $username = trim($username);
  $account = user_load_by_name($username);

  if (!$account) {
    // Create the fields we will be using, and make an initial guess at the email address.
    $userData = array(
      'name' => $username,
      'mail' => $username . '@unl.edu',
      'status' => 1,
      'timezone' => variable_get('date_default_timezone', date_default_timezone_get()),
      'data' => array(
        'unl' => array(
          'fullName' => '',
          'affiliations' => '',
          'primaryAffiliation' => '',
          'department' => '',
          'major' => '',
          'studentStatus' => array(),
        )
      ),
    );
  }
  else {
    // If an account already exists, don't reset blocked status or timezone preference.
    $userData['timezone'] = $account->timezone;
    $userData['status'] = $account->status;
  }

  // If a new account or enough time has passed since last login, do LDAP data lookup.
  if (!$account || !array_key_exists('lastDataFetch', $account->data['unl']) || time() - $account->data['unl']['lastDataFetch'] > unl_cas_get_setting('ldap_seconds')) {
    $result = unl_cas_get_user_record($username);

    // If either LDAP or Directory found data, use it.
    if ($result) {
      $result = array_change_key_case($result, CASE_LOWER);
      $userData['mail'] = $result['unlmail'][0];
      $userData['data']['unl'] = array(
        'NUID' => $result['unluncwid'][0],
        'fullName' => $result['displayname'][0],
        'affiliations' => $result['edupersonaffiliation'],
        'primaryAffiliation' => $result['edupersonprimaryaffiliation'][0],
        'department' => (isset($result['department']) ? $result['department'][0] : ''),
        'lastDataFetch' => time(),
      );
    }
  }

  return user_save($account, $userData);
}

/**
 * Implements hook_user_presave().
 *
 * On non-default sites, only allow users who are administrators on the default
 * to be administrators.  Also, automatically make users who are administrators
 * on the default site an administrator on non-default sites.
 */
function unl_cas_user_presave(&$edit, $account, $category) {
  if (conf_path() == 'sites/default') {
    return;
  }

  if (isset($account->name)) {
    $username = $account->name;
  }
  else {
    $username = $edit['name'];
  }

  $local_admin_role_id = unl_shared_variable_get('user_admin_role');

  if (_unl_cas_is_user_default_site_administrator($username)) {
    $local_admin_role = user_role_load($local_admin_role_id);
    if (!isset($edit['roles']) && isset($account->roles)) {
      $edit['roles'] = $account->roles;
    }
    $edit['roles'][$local_admin_role_id] = $local_admin_role->name;
  }
  else {
    unset($edit['roles'][$local_admin_role_id]);
  }
}

/**
 * Implements hook_user_login().
 *
 * On non-default sites, if a user with the administrator role logs in, verify
 * that they are still an admin in the default site.  If not, remove them from
 * the role.
 */
function unl_cas_user_login(&$edit, $account) {
  if (conf_path() == 'sites/default') {
    return;
  }

  if (!in_array(unl_shared_variable_get('user_admin_role'), array_keys($account->roles))) {
    return;
  }

  $edit = array(
    'roles' => $account->roles,
  );
  user_save($account, $edit);
}

/**
 * Determines if given user has the administrator role on the master/root site of a multisite setup.
 */
function _unl_cas_is_user_default_site_administrator($username) {
  $shared_prefix = unl_get_shared_db_prefix();
  $shared_admin_role_id = unl_shared_variable_get('user_admin_role');
  $shared_admin_usernames = db_query("SELECT u.name FROM {$shared_prefix}users AS u JOIN {$shared_prefix}users_roles AS r ON u.uid = r.uid WHERE name=:name AND rid=:rid", array(':name' => $username, ':rid' => $shared_admin_role_id))->fetchCol();
  return count($shared_admin_usernames) > 0;
}

/**
 * Implements template_preprocess_user_picture().
 */
function unl_cas_preprocess_user_picture(&$variables) {
  //Default image: https://planetred.unl.edu/mod/profile/graphics/defaultmedium.gif
  if ($variables['account']->uid == 0) {
    $variables['user_picture'] = '<img class="profile_pic medium" src="http://planetred.unl.edu/mod/profile/graphics/defaultmedium.gif" alt="Photo placeholder for unspecified user" />';
    return;
  }
  $username = $variables['account']->name;
  $variables['user_picture'] = '<img class="profile_pic medium" src="https://planetred.unl.edu/pg/icon/unl_' . $username . '/medium" alt="' . $username . '\'s photo" />';
}

function unl_cas_get_setting($name, $default = NULL) {
  $data = db_select('unl_cas_settings', 's')
    ->fields('s', array('value'))
    ->condition('s.name', $name)
    ->execute()
    ->fetchCol();
  if (count($data) > 0) {
    return unserialize($data[0]);
  }
  return $default;
}

function unl_cas_set_setting($name, $value) {
  $value = serialize($value);
  if (unl_cas_get_setting($name, '__foobar__') == '__foobar__') {
    db_insert('unl_cas_settings')
      ->fields(array('name', 'value'))
      ->values(array($name, $value))
      ->execute();
  }
  else {
    db_update('unl_cas_settings')
      ->fields(array('value' => $value))
      ->condition('name', $name)
      ->execute();
  }
}

/**
 * Implements hook_token_info().
 */
function unl_cas_token_info() {
  $info['tokens']['user']['nuid'] = array(
    'name' => t('NUID'),
    'description' => t('Nebraska NUID of the user account.'),
  );
  $info['tokens']['user']['full-name'] = array(
    'name' => t('Full Name'),
    'description' => t('First and last name of the user.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function unl_cas_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'nuid':
          $replacements[$original] = $account->data['unl']['NUID'];
          break;
        case 'full-name':
          $replacements[$original] = $account->data['unl']['fullName'];
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Perform an ldap_search() and clean-up the results.
 */
function _unl_cas_ldap_search($ldap_connection, $base_dn, $filter) {
  $result = @ldap_search($ldap_connection, $base_dn, $filter);
  if ($result === FALSE) {
    throw new Exception('LDAP search failed: ' . ldap_error($this->_conn));
  }

  $referrals = null;
  $matcheddn = null;
  $errmsg = null;
  $errcode = null;
  if (ldap_parse_result($ldap_connection, $result, $errcode, $matcheddn, $errmsg, $referrals)) {
    if ($errcode !== 0) {
      throw new Exception('Error retrieving results: ' . ldap_err2str($errcode));
    }
  }
  else {
    throw new Exception('Error retrieving results: ' . ldap_error($this->_conn));
  }

  $entries = ldap_get_entries($ldap_connection, $result);
  if ($result === FALSE) {
    throw new Exception('Error retrieving results: ' . ldap_error($this->_conn));
  }

  // Strip off redundant data.
  for ($i = 0; $i < $entries['count']; $i++) {
    for ($j = 0; $j < $entries[$i]['count']; $j++) {
      unset($entries[$i][$entries[$i][$j]]['count']);
      unset($entries[$i][$j]);
    }
    unset($entries[$i]['count']);
  }
  unset($entries['count']);

  return $entries;
}
