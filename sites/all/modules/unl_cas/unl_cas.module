<?php

require_once drupal_get_path('module', 'unl') . '/includes/common.php';
require_once drupal_get_path('module', 'unl_cas') . '/includes/Ldap.php';


/**
 * Implements hook_enable().
 */
function unl_cas_enable() {
  variable_set('user_register', 0);
}

/**
 * Implements hook_init().
 */
function unl_cas_init() {
  // In read only mode, we don't process login requests.
  if (_unl_cas_is_read_only()) {
    $GLOBALS['user'] = drupal_anonymous_user();
    return;
  }

  // Don't force login on the my.unl.edu page.
  if (request_path() == 'myunl') {
    return;
  }

  // Don't try anything on cas paths.
  if (request_path() == 'cas' ||
      request_path() == 'caslogout' ||
      request_path() == 'user/logout'
    ) {
    return;
  }

  // If unl_sso cookie is set, try to log the person in.
  if (array_key_exists('unl_sso', $_COOKIE) && user_is_anonymous()) {
    cas_login_check(FALSE);
  }
}

/**
 * Implements hook_cas_user_alter().
 */
function unl_cas_cas_user_alter(&$cas_user) {
  $cas_name = $cas_user['name'];

  if (cas_user_load_by_name($cas_name) === FALSE) {
    // No existing user could be found by CAS username.

    $account = user_load_by_name($cas_name);
    if ($account && $account->uid) {
      // We found an existing user with the same username, add a CAS username.
      cas_user_operations_create_username(array($account->uid));
    }
  }
}


/**
 * Implements hook_menu_site_status_alter().
 */
function unl_cas_menu_site_status_alter(&$menu_site_status, $path) {
    // Allow access to user/cas even if site is in offline mode.
    if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && $path == 'user/cas') {
        $menu_site_status = MENU_SITE_ONLINE;
    }
}

/**
 * Implements hook_menu().
 */
function unl_cas_menu() {
  $items['admin/people/import'] = array(
    'title'            => 'Import User from UNL Directory',
    'description'      => 'Import a user from the UNL Directory',
    'access arguments' => array('administer users'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('unl_cas_user_import'),
    'type'             => MENU_LOCAL_ACTION,
    'file'             => 'unl_cas.admin.inc',
    'weight'           => 1,
  );

  $items['admin/config/people/unl_cas'] = array(
    'title'            => 'UNL CAS',
    'description'      => 'Configure the UNL CAS module',
    'access callback'  => 'unl_user_is_administrator',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('unl_cas_config'),
    'file'             => 'unl_cas.admin.inc',
    'weight'           => 1,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function unl_cas_menu_alter(&$items) {
  $items['admin/people/create']['weight'] = 2;
  $items['admin/people/create']['title'] .= ' manually';
  $items['admin/people/create']['access arguments'] = array('administer permissions');

}




/**
 * Implements hook_form_alter().
 */
function unl_cas_form_alter(&$form, &$form_state, $form_id) {
  // If the CMS is in read-only mode, just display a message.  Don't let a user log in.
  if (_unl_cas_is_read_only() && in_array($form_id, ['user_login', 'user_login_block'])) {
    echo 'Login has been temporarily disabled due to maintenance. Please try again later. Visit <a href="https://status.nebraska.edu/">status.nebraska.edu</a> for more information (if available).';
    exit;
  }


  if ($form_id == 'user_profile_form') {
    if (isset($form['account']['name'])) {
      $form['account']['name']['#type'] = 'hidden';
    }

    $form['account']['pass']['#type'] = 'hidden';
    $form['account']['current_pass_required_values']['#type'] = 'hidden';
    $form['account']['current_pass']['#type'] = 'hidden';

    $form['picture']['#description'] = 'To change your picture, visit <a href="https://planetred.unl.edu/pg/profile/unl_' . $GLOBALS['user']->name . '">Planet Red</a>.';
    $form['picture']['picture_delete']['#type'] = 'hidden';
    $form['picture']['picture_upload']['#type'] = 'hidden';

    // Disable checking the current password when changing email.
    if ($validate_password_index = array_search('user_validate_current_pass', $form['#validate']) !== FALSE) {
      unset($form['#validate'][$validate_password_index]);
    }
  }

}

/**
 * Get user data from LDAP (or directory).
 */
function unl_cas_get_user_record($username) {
  // First, try getting the info from LDAP.
  try {
    $ldap = new Unl_Ldap(unl_cas_get_setting('ldap_uri'));
    $ldap->bind(unl_cas_get_setting('ldap_dn'), unl_cas_get_setting('ldap_password'));
    $results = $ldap->search('ou=people,dc=unl,dc=edu', 'sAMAccountName=' . $username);
    if (count($results) > 0) {
      $result = $results[0];
    }
  }
  catch (Exception $e) {
    // don't do anything, just go on to try the PeopleFinder method
  }

  // Next, if LDAP didn't work, try PeopleFinder service...
  if (!$result) {
    $json = unl_url_get_contents('http://directory.unl.edu/service.php?format=json&uid=' . $username);
    if ($json) {
      $result = json_decode($json, TRUE);
    }
  }

  return $result;
}

/**
 * Generates and saves a user using info from LDAP or Directory
 */
function unl_cas_import_user($username) {
  $username = trim($username);
  $account = user_load_by_name($username);

  if (!$account) {
    // Create the fields we will be using, and make an initial guess at the email address.
    $userData = array(
      'name' => $username,
      'mail' => $username . '@unl.edu',
      'status' => 1,
      'timezone' => variable_get('date_default_timezone', date_default_timezone_get()),
      'data' => array(
        'unl' => array(
          'fullName' => '',
          'affiliations' => '',
          'primaryAffiliation' => '',
          'department' => '',
          'major' => '',
          'studentStatus' => array(),
        )
      ),
    );
  }
  else {
    // If an account already exists, don't reset blocked status or timezone preference.
    $userData['timezone'] = $account->timezone;
    $userData['status'] = $account->status;
  }

  // If a new account or enough time has passed since last login, do LDAP data lookup.
  if (!$account || !array_key_exists('lastDataFetch', $account->data['unl']) || time() - $account->data['unl']['lastDataFetch'] > unl_cas_get_setting('ldap_seconds')) {
    $result = unl_cas_get_user_record($username);

    // If either LDAP or Directory found data, use it.
    if ($result) {
      $result = array_change_key_case($result, CASE_LOWER);
      $userData['mail'] = $result['mail'][0];
      $userData['data']['unl'] = array(
        'NUID' => array_key_exists('employeeid', $result) ? $result['employeeid'][0] : $result['unluncwid'][0],
        'fullName' => array_key_exists('displayname', $result) ? $result['displayname'][0] : $result['displayName'][0],
        'affiliations' => array_key_exists('edupersonaffiliation', $result) ? $result['edupersonaffiliation'] : $result['eduPersonAffiliation'],
        'primaryAffiliation' => array_key_exists('edupersonprimaryaffiliation', $result) ? $result['edupersonprimaryaffiliation'] : $result['eduPersonPrimaryAffiliation'],
        'department' => (isset($result['departmentnumber']) ? $result['departmentnumber'][0] : (isset($result['unlHROrgUnitNumber']) ? $result['unlHROrgUnitNumber'][0] : '')),
        'lastDataFetch' => time(),
      );
    }
  }

  return user_save($account, $userData);
}

/**
 * Implements hook_user_presave().
 *
 * On non-default sites, only allow users who are administrators on the default
 * to be administrators.  Also, automatically make users who are administrators
 * on the default site an administrator on non-default sites.
 */
function unl_cas_user_presave(&$edit, $account, $category = NULL) {
  if (conf_path() == 'sites/default') {
    return;
  }

  if (isset($account->name)) {
    $username = $account->name;
  }
  else {
    $username = $edit['name'];
  }

  $local_admin_role_id = unl_shared_variable_get('user_admin_role');

  if (_unl_cas_is_user_default_site_administrator($username)) {
    $local_admin_role = user_role_load($local_admin_role_id);
    if (!isset($edit['roles']) && isset($account->roles)) {
      $edit['roles'] = $account->roles;
    }
    $edit['roles'][$local_admin_role_id] = $local_admin_role->name;
  }
  else {
    unset($edit['roles'][$local_admin_role_id]);
  }
}

/**
 * Implements hook_user_login().
 *
 * On non-default sites, if a user with the administrator role logs in, verify
 * that they are still an admin in the default site.  If not, remove them from
 * the role.
 */
function unl_cas_user_login(&$edit, $account) {
  if (conf_path() == 'sites/default') {
    return;
  }

  if (!in_array(unl_shared_variable_get('user_admin_role'), array_keys($account->roles))) {
    return;
  }

  $edit = array(
    'roles' => $account->roles,
  );
  user_save($account, $edit);
}

/**
 * Determines if given user has the administrator role on the master/root site of a multisite setup.
 */
function _unl_cas_is_user_default_site_administrator($username) {
  $shared_prefix = unl_get_shared_db_prefix();
  $shared_admin_role_id = unl_shared_variable_get('user_admin_role');
  $shared_admin_usernames = db_query("SELECT u.name FROM {$shared_prefix}users AS u JOIN {$shared_prefix}users_roles AS r ON u.uid = r.uid WHERE name=:name AND rid=:rid", array(':name' => $username, ':rid' => $shared_admin_role_id))->fetchCol();
  return count($shared_admin_usernames) > 0;
}

/**
 * Implements template_preprocess_user_picture().
 */
function unl_cas_preprocess_user_picture(&$variables) {
  //Default image: https://planetred.unl.edu/mod/profile/graphics/defaultmedium.gif
  if ($variables['account']->uid == 0) {
    $variables['user_picture'] = '<img class="profile_pic medium" src="http://planetred.unl.edu/mod/profile/graphics/defaultmedium.gif" alt="Photo placeholder for unspecified user" />';
    return;
  }
  $username = $variables['account']->name;
  $variables['user_picture'] = '<img class="profile_pic medium" src="https://planetred.unl.edu/pg/icon/unl_' . $username . '/medium" alt="' . $username . '\'s photo" />';
}

function unl_cas_get_setting($name, $default = NULL) {
  $data = db_select('unl_cas_settings', 's')
    ->fields('s', array('value'))
    ->condition('s.name', $name)
    ->execute()
    ->fetchCol();
  if (count($data) > 0) {
    return unserialize($data[0]);
  }
  return $default;
}

function unl_cas_set_setting($name, $value) {
  $value = serialize($value);
  if (unl_cas_get_setting($name, '__foobar__') == '__foobar__') {
    db_insert('unl_cas_settings')
      ->fields(array('name', 'value'))
      ->values(array($name, $value))
      ->execute();
  }
  else {
    db_update('unl_cas_settings')
      ->fields(array('value' => $value))
      ->condition('name', $name)
      ->execute();
  }
}

/**
 * Implements hook_token_info().
 */
function unl_cas_token_info() {
  $info['tokens']['user']['nuid'] = array(
    'name' => t('NUID'),
    'description' => t('Nebraska NUID of the user account.'),
  );
  $info['tokens']['user']['full-name'] = array(
    'name' => t('Full Name'),
    'description' => t('First and last name of the user.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function unl_cas_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'nuid':
          $replacements[$original] = $account->data['unl']['NUID'];
          break;
        case 'full-name':
          $replacements[$original] = $account->data['unl']['fullName'];
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Returns true if the CMS is running in read-only mode, and logins should be disabled.
 */
function _unl_cas_is_read_only() {
  return (isset($GLOBALS['conf']['db_select_only']) && $GLOBALS['conf']['db_select_only']);
}
