<?php

require_once dirname(__FILE__) . '/includes/common.php';

/**
 * Implements hook_help().
 */
function unl_help($path, $arg) {
  switch ($path) {
    case 'admin/modules/uninstall':
      if ((module_exists('unl_multisite') && conf_path() == 'sites/default') || unl_table_is_shared('role_permission')) {
        return '<h1>Be careful! Uninstalling a module clears its permissions which are shared globally between sites!</h1>';
      }
    case 'admin/people/permissions':
      if ((module_exists('unl_multisite') && conf_path() == 'sites/default') || unl_table_is_shared('role_permission')) {
        return '<h1>Be careful! Permissions are shared globally between sites!</h1>';
      }
    case 'user/unl/technical_feedback':
      return '<p>Consider visiting the Web Developer Network <a href="http://wdn.unl.edu/help/irc.shtml" target="_blank">chat room</a> as well.</p>';
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function unl_entity_info_alter(&$entity_info) {
  // Add additional view_mode to admin/structure/types/manage/CONTENTTYPE/display for an abbriviated teaser (for use in sidebars, etc)
  $entity_info['node']['view modes']['abbr_teaser'] = array(
    'label' => t('Abbriviated teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_context_plugins(). (Context module)
 */
function unl_context_plugins() {
  $plugins = array();
  $plugins['unl_context_reaction_linkrelhome'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'unl') .'/plugins',
      'file' => 'unl_context_reaction_linkrelhome.inc',
      'class' => 'unl_context_reaction_linkrelhome',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['unl_context_reaction_blockremove'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'unl') .'/plugins',
      'file' => 'unl_context_reaction_blockremove.inc',
      'class' => 'unl_context_reaction_blockremove',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry(). (Context module)
 */
function unl_context_registry() {
  return array(
    'reactions' => array(
      'linkrelhome' => array(
        'title' => t('link rel="home" tag'),
        'plugin' => 'unl_context_reaction_linkrelhome',
      ),
      'blockremove' => array(
        'title' => t('Block Remove'),
        'plugin' => 'unl_context_reaction_blockremove',
      ),
    ),
  );
}

/**
 * Implements hook_context_page_reaction(). (Context module)
 */
function unl_context_page_reaction() {
  if ($plugin = context_get_plugin('reaction', 'linkrelhome')) {
    $plugin->execute();
  }
}

/**
 * Implements hook_page_alter().
 */
function unl_page_alter(&$page) {
  // Add UNLcms technical feedback link to toolbar
  if (isset($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#pre_render'][] = 'unl_toolbar_add_links';
  }
}

/**
 * Implements hook_block_list_alter().
 */
function unl_block_list_alter(&$blocks) {
  // Hide all content area blocks on 404 page if using the 'unl-404' menu callback.
  $status = drupal_get_http_header('status');
  if ($status == '404 Not Found' && variable_get('site_404') == 'unl-404') {
    foreach ($blocks as $key => $block) {
      if (in_array($block->region, array('content', 'sidebar_first', 'sidebar_second'))) {
        unset($blocks[$key]);
      }
    }
  }
}

/**
 * Custom function called from unl_page_alter() to add links to the toolbar.
 */
function unl_toolbar_add_links($toolbar) {
  $link['html'] = TRUE;
  $icon = '<span style="background-image:url('. base_path() . 'sites/all/modules/unl/images/feedback_toolbar.png); background-repeat: no-repeat; width:17px; height:14px; text-indent:-9999px; display:block; margin: 3px 0;">Support</span>';
  $link['title'] = t("!icon", array('!icon' => $icon));
  $link['attributes']['title'] = t('Submit feedback/issues/problems concerning the UNLcms system');
  $link['href'] = 'user/unl/support';

  $toolbar['toolbar_user']['#links'] = array_merge(array('unl' => $link), $toolbar['toolbar_user']['#links']);
  return $toolbar;
}

/**
 * Implements hook_page_build().
 */
function unl_page_build(&$page) {
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('reaction', 'blockremove')) {
      $plugin->execute($page);
    }
    // See block_page_build. Clear static cache b/c in overlay form submissions
    // hook_page_build can get called more than once per page load.
    drupal_static_reset('context_reaction_block_list');
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function unl_field_attach_view_alter(&$output, $context) {
  // Replace the field named field_hrorgunit containing an org unit number with that unit's listing from the UNL directory
  foreach (element_children($output) as $field_name) {
    $element = isset($output[$field_name]['#field_name']) ? $output[$field_name]['#field_name'] : '';
    switch ($element) {
      case 'field_hrorgunit':
        $result = unl_url_get_contents('http://directory.unl.edu/departments/?view=deptlistings&org_unit='.$element['#items'][0]['value'].'&format=partial');
        if (!empty($result) && $result != '<div id="all_employees"></div>') {
          drupal_add_css('http://directory.unl.edu/css/peoplefinder_default.css', 'external');
          drupal_add_js('http://directory.unl.edu/scripts/peoplefinder.js', 'external');
          drupal_add_js('var PF_URL = "http://directory.unl.edu/", ANNOTATE_URL = "http://annotate.unl.edu/";', 'inline');
          // Need to check to see if directory.unl.edu only returned a partial result. If so, result will have a message in between the closing ul and div tags like so: </ul><p>Try refining your search.</p></div></div>
          if (!preg_match('/<\/ul>\s*\n*\s*<\/div><\/div>/', $result)) {
            // Extra message at the bottom indicating not all results returned - hide it
            drupal_add_css('#all_employees > * > p {display:none;}', 'inline');
            // Alert the user to visit the directory site
            drupal_add_js('jQuery(document).ready(function(){jQuery("#all_employees .result_head").css("font-size","13px").html("We\'re a big department! Partial listing shown below, please visit <a href=\"http://directory.unl.edu/departments/'.$element['#items'][0]['value'].'#all_employees\">our department lisiting on the UNL Directory</a> to see everyone.");});', 'inline');
          }
        }
        else {
          $result = '<p>Please visit the <a href="http://directory.unl.edu/">UNL Directory</a> for listings.</p>';
        }
        foreach ($element['#items'] as $delta => $item) {
          $element[$delta]['#markup'] = $result;
        }
        break;
      default:
    }
  }
}

/**
 * Implements hook_node_access().
 */
function unl_node_access($node, $op, $account) {
  // When content types are created they have blank permissions so base access on the 'Basic page' type. This is done because with shared permissions subsites can't edit permissions.
  //@TODO Make this configureable i.e. make it possible to opt-out certain types from this.
  switch($op) {
    case 'view':
      break;
    case 'create':
      return user_access('create page content', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
    case 'update':
      if (isset($node->uid) && $node->uid == $account->uid) {
        return user_access('edit own page content', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
      }
      return user_access('edit any page content', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
    case 'delete':
      if (isset($node->uid) && $node->uid == $account->uid) {
        return user_access('delete own page content', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
      }
      return user_access('delete any page content', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
  }
}

function unl_node_prepare($node) {
  $node->menu['expanded'] = 1;
}

/**
 * Implements hook_node_presave().
 */
function unl_node_presave($node) {
  // Tidy html in fields that are text areas
  foreach(field_info_instances('node', $node->type) as $field) {
    if (substr($field['widget']['type'], 0, 13) == 'text_textarea') {
      $field_name = $field['field_name'];
      $lang = $node->language;
      $node_field = $node->$field_name;
      if (isset($node_field[$lang][0]['value'])) {
        $tidied_value = unl_tidy($node_field[$lang][0]['value']);
        $node_field[$lang][0]['value'] = $tidied_value;
        $node->$field_name = $node_field;
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function unl_permission() {
  return array(
    'unl grant all permissions' => array(
      'title'       => t('Grant All Permissions'),
      'description' => t('If this is not checked, a user can only grant permissions that they themselves have. Requires the "Administer permissions" permission.'),
      'restrict access' => TRUE,
    ),

    'unl administer administrator permissions' => array(
      'title'       => t('Administer Administrator\'s Permissions'),
      'description' => t('If this is not checked, a user can not change the permissions of the administrator role. Requires the "Administer permissions" permission.'),
      'restrict access' => TRUE,
    ),

    'unl theme settings' => array(
      'title'       => t('Change Theme Settings'),
      'description' => t('Allow this role to change the current theme settings.'),
    ),

    'unl imce javascript upload' => array(
      'title'       => t('Upload Javascript Files Through IMCE'),
    ),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function unl_preprocess_node(&$vars) {
  // Full page representation wanted for 404 page
  $status = drupal_get_http_header('status');
  if ($status == '404 Not Found') {
    $vars['page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function unl_preprocess_page(&$vars) {
  switch (current_path()) {
    case 'admin/help':
      // Override default help_help text about what to do after install
      $vars['page']['help']['system_help']['#markup'] = '<h2>UNLcms Help</h2><p>Help is available from:</p>
                      <ul><li><a href="http://unlcms.unl.edu/guide">Online Guide</a></li>
                          <li><a href="http://unlcms.unl.edu/community">Users Group</a>, the second Tuesday of each month at 3:00pm in Nebraska Union</li>
                          <li><a href="http://wdn.unl.edu/help/irc.shtml">WDN Chat Room</a></li></ul>
                      <p>Below are help topics automatically generated by Drupal.</p><hr />';
      break;
    case 'admin/modules':
      if (!unl_user_is_administrator()) {
        // Changed here rather than using hook_help because the later merely appends to the existing text.
        $vars['page']['help']['system_help']['#markup'] = '<p>Not all modules can be turned on/off. If you have questions about modules on this page or modules not yet part of the UNL project <a href="user/unl/technical_feedback">contact an administrator</a>.</p>';
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function unl_menu() {
  $items = array();

  // 404 page pulled from default site.
  $items['unl-404'] = array(
    'title' => 'Page not found',
    'access callback' => TRUE,
    'page callback' => 'unl_404_page',
    'type' => MENU_CALLBACK,
  );

  // Output html snippets for regions.
   $items['sharedcode/%'] = array(
    'title' => 'sharedcode files',
    'access arguments' => array('access content'),
    'page callback' => 'unl_sharedcode',
    'page arguments' => array(1),
  );

  // Returns confirmation 'user_loggedin' if user is logged into the system
   $items['user/unl/whoami'] = array(
    'title' => 'UNL Whoami Tool',
    'access callback' => TRUE,
    'page callback' => 'unl_whoami',
    'file' => 'unl_whoami.php',
  );

  // Returns UNLcms support form
  $items['user/unl/support'] = array(
    'title' => 'UNLcms Support Form',
    'description' => 'Submit feedback/issues/problems concerning the UNLcms system.',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unl_support'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'unl_support.php',
  );

  $items['admin/content/unl/reset'] = array(
    'title' => 'Reset Site',
    'description' => 'Remove all nodes, menu items, etc from this site.',
    'access arguments' => array('administer nodes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unl_reset_site'),
    'file' => 'includes/reset_site.php',
  );

  // Redirect the Appearance link away from admin/appearance for users who can't Administer themes but can Change Theme Settings
  $items['admin/themes'] = array(
    'title' => 'Appearance',
    'description' => 'Configure your theme.',
    'access callback' => 'unl_user_access',
    'access arguments' => array(array('!administer themes', 'unl theme settings')),
    'page callback' => 'drupal_get_form',
    'position' => 'left',
    'weight' => -6,
  );

  // Hello world type page for performance/uptime monitoring
  $items['_status'] = array(
    'title' => 'Still Alive',
    'page callback' => 'unl_still_alive',
    'access callback' => TRUE,
  );

  // UNL Settings
  $items['admin/config/system/unl'] = array(
    'title' => 'UNL',
    'description' => 'Configure UNL System Settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unl_config'),
    'file' => 'includes/unl.admin.inc',
    'weight' => 1,
  );

  if (module_exists('imce')) {
    // Add IMCE file browser to Content section
    $items['admin/content/imce-file-browser'] = array(
      'title' => 'File browser',
      'page callback' => 'imce_user_page',
      'page arguments' => array($GLOBALS['user']->uid),
      'access callback' => '_unl_imce_file_browser_access',
      'file' => 'inc/imce.page.inc',
      'file path' => drupal_get_path('module', 'imce'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
    );
    // Add IMCE file browser to Add content list
    $items['node/add/imce-file-upload'] = array(
      'title' => 'File upload',
      'description' => 'Upload files from your computer, such as PDF documents, to the file system.',
      'page callback' => 'imce_user_page',
      'page arguments' => array($GLOBALS['user']->uid),
      'access callback' => '_unl_imce_file_browser_access',
      'file' => 'inc/imce.page.inc',
      'file path' => drupal_get_path('module', 'imce'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function unl_menu_alter(&$items) {
  // This duplicates the form at admin/appearance/settings/unl_wdn for roles that can't 'administer themes' but have 'unl theme settings' permission.
  // For these users the Appearance link is changed to point to admin/themes
  foreach (array('module', 'file', 'page arguments') as $key) {
    $items['admin/themes'][$key] = $items['admin/appearance/settings/' . variable_get('theme_default')][$key];
  }
  // Put all user pages in the admin theme
  $items['user']['theme callback'] = '_unl_get_admin_theme';
  // Make sure all Workbench Moderation admin pages are in the admin theme
  if (module_exists('workbench_moderation')) {
    $items['node/%node/moderation']['theme callback'] = '_unl_get_admin_theme';
    $items['node/%node/moderation/%/unpublish']['theme callback'] = '_unl_get_admin_theme';
  }

  // Add a menu hook for the image module to use clean file URLs.
  if (variable_get('unl_clean_file_url') && module_exists('image')) {
    $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
    $items['styles/%image_style'] = $items[$directory_path . '/styles/%image_style'];
    // This parameter is how "deep" to look into request_path() for the image's path.
    // Since clean URLs have no "prefix", we can just set it to 1.
    $items['styles/%image_style']['page arguments'] = array(1);
  }

  $items['admin/modules/uninstall']['access callback'] = 'unl_user_is_administrator';
}

/**
 * Custom page callback.
 */
function unl_404_page() {
  $database = $GLOBALS['databases']['default']['default'];
  $database['prefix'] = unl_get_shared_db_prefix();
  Database::addConnectionInfo('default_site', 'default', $database);
  // Switch database connection to default site.
  db_set_active('default_site');

  $default_404 = unl_shared_variable_get('site_404');
  // @TODO: $default_404 should look like "node/182" but is there a safer way to retrieve nid?
  $node = node_load(substr($default_404, 5));
  if ($node) {
    drupal_set_title($node->title);
    $build = node_view($node, 'full');
    $build['links']['#access'] = FALSE;
    $build['#contextual_links'] = NULL;
  }
  else {
    $build = array();
  }

  // Restore database connection.
  db_set_active();
  return drupal_render($build);
}

/**
 * Custom function that creates html snippet output at sharedcode/% paths to
 *   mimic files that once existed on static UNL templated sites.
 */
function unl_sharedcode($file = null) {
  foreach (system_region_list($GLOBALS['theme']) as $region_key => $region_name) {
    if ($blocks = block_get_blocks_by_region($region_key)) {
      $regions[$region_key] = $blocks;
    }
    else {
      $regions[$region_key] = array();
    }
  }

  switch ($file) {
    case 'footer.html':
    case 'footer_content':
      $region = 'footercontent';
      break;
    case 'footerContactInfo.html':
    case 'contact_us':
      $region = 'contactinfo';
      break;
    case 'navigation.html':
    case 'navigation_links':
      $region = 'navlinks';
      break;
    case 'relatedLinks.html':
    case 'related_links':
      $region = 'leftcollinks';
      break;
    default:
      drupal_not_found();
      return;
  }

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  drupal_add_http_header('Content-Language', 'en');
  print render($regions[$region]);
  exit;
}

/**
 * Implements hook_file_validate().
 * Fires when files are uploaded after Drupal Core sanitization but before saving to file system or db
 */
function unl_file_validate($file) {
  // For IMCE uploads only, check if Drupal core just altered a *.js upload to *.js.txt and correct if permitted
  if (isset($file->source) && $file->source == 'imce' && substr($file->filename, -7) == '.js.txt' && user_access('unl imce javascript upload')) {
    // Chop off the .txt extesnsion that's been added
    $file->destination = substr($file->destination, 0, -4);
    $file->filename = substr($file->filename, 0, -4);
  }
  return;
}

/**
 * Implements hook_form_FORM_ID_alter() for system_theme_settings.
 * This is used in addition to unl_wdn_form_system_theme_settings_alter because that hook
 *   runs before color_form_system_theme_settings_alter which overwrites an attempt
 *   at setting $form['color']['#access'].
 */
function unl_form_system_theme_settings_alter(&$form, &$form_state) {
  global $user;

  $form['advanced_settings']['unl_affiliate']['#access'] = unl_user_is_administrator();

  $is_affiliate = $form['advanced_settings']['unl_affiliate']['#default_value'];

  $form['color']['#access'] = $is_affiliate;
  $form['logo']['#access'] = $is_affiliate;
  $form['favicon']['#access'] = $is_affiliate;

  // These are settings manipulations that we want for UNL but don't necessarily belong in the theme
  if (!$is_affiliate && !unl_user_is_administrator()) {
    $form['theme_settings']['toggle_logo']['#access'] = false;
    $form['theme_settings']['toggle_favicon']['#access'] = false;
    $form['theme_settings']['toggle_name']['#access'] = false;
    $form['theme_settings']['toggle_comment_user_verification']['#access'] = false;
    $form['theme_settings']['toggle_main_menu']['#access'] = false;
    $form['theme_settings']['toggle_secondary_menu']['#access'] = false;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_display_overview_form.
 */
function unl_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  // Add additional label display options in Manage Display section of content type editing (admin/structure/types/manage/content-type/display)
  foreach ($form['#fields'] as $key => $field) {
    $form['fields'][$field]['label']['#options'] += array('h2'=>'Block: h2','h3'=>'Block: h3','h4'=>'Block: h4','h5'=>'Block: h5','h6'=>'Block: h6');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_modules.
 */
function unl_form_system_modules_alter(&$form, &$form_state, $form_id) {
  // Whitelist of modules that Site Admin are allowed to turn on and off on admin/modules
  $modules = unl_shared_variable_get('unl_module_whitelist', array());

  if (!unl_user_is_administrator() && isset($form['modules'])) {
    foreach ($form['modules'] as $category_name => $category) {
      if (is_array($category)) {
        foreach ($category as $module_name => $module) {
          if (!in_array($module_name, $modules) && substr($module_name,0,1) !== '#') {
            $form['modules'][$category_name][$module_name]['#disabled'] = true;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_logging_settings.
 */
function unl_form_system_logging_settings_alter(&$form, $form_state, $form_id) {
  // Disable ability of non-admins to turn on error reporting on on admin/config/development/logging.
  if (!unl_user_is_administrator()) {
    $form['#disabled'] = true;
  }
}

/**
 * Implements hook_form_alter().
 */
function unl_form_alter(&$form, $form_state, $form_id) {
  // Make new menu items expanded by default.
  if ($form_id == 'menu_edit_item' && $form['mlid']['#value'] == 0) {
    $form['expanded']['#default_value'] = TRUE;
  }

  if ($form_id == 'system_site_information_settings') {
    $form['site_information']['https'] = array(
      '#type' => 'checkbox',
      '#title' => 'SSL Enabled',
      '#default_value' => variable_get('https', FALSE),
    );

    if (conf_path() != 'sites/default') {
      $alternate_uris = unl_get_alternate_base_uris();
      $base_urls = array('_null' => '--Select One--');
      foreach ($alternate_uris as $alternate_uri) {
        $base_urls[$alternate_uri] = $alternate_uri;
      }
      $form['site_information']['unl_primary_base_url'] = array(
        '#title' => 'Primary Base URL',
        '#type' => 'select',
        '#options' => $base_urls,
        '#default_value' => variable_get('unl_primary_base_url'),
      );
      $form['#submit'][] = 'unl_system_settings_form_submit';
    }
  }

  // Modifications for non-administrators
  $admin_role_id = unl_shared_variable_get('user_admin_role', -1);
  if (!in_array($admin_role_id, array_keys($GLOBALS['user']->roles))) {
    switch ($form_id) {
      // Add additional validation on admin/people/permissions/roles/edit/%
      case 'user_admin_role' :
        $form['#validate'][] = 'unl_user_admin_role_validate';
        break;
      // Hide administrator role on admin/people/permissions/roles
      case 'user_admin_roles' :
        foreach ($form['roles'] as $key => $role) {
          if (isset($role['#role']->rid) && $role['#role']->rid == $admin_role_id) {
            unset($form['roles'][$key]);
          }
        }
        break;
      // Hide administrator column on admin/people/permissions
      case 'user_admin_permissions' :
        if (!user_access('unl grant all permissions')) {
          // Remove permissions this user doesn't have from the headings list.
          foreach ($form['permission'] as $permission => $sub_form) {
            if (is_int($permission)) {
              continue;
            }
            if (!user_access($permission)) {
              unset($form['permission'][$permission]);
            }
          }

          // Remove any empty permission section headings.
          $permission_sections = array_keys($form['permission']);
          foreach ($permission_sections as $index => $permission_section) {
            if (!is_int($permission_section)) {
              continue;
            }
            if (!isset($permission_sections[$index + 1]) || is_int($permission_sections[$index + 1])) {
              unset($form['permission'][$permission_section]);
            }
          }

          // Remove the permissions this user doesn't have from the checkboxes list.
          foreach ($form['checkboxes'] as $role_id => $sub_form) {
            foreach ($sub_form['#options'] as $permission => $value) {
              if (!user_access($permission)) {
                unset($form['checkboxes'][$role_id]['#options'][$permission]);
              }
            }
          }
        }

        // Unset the administrator checkbox column if user can't administer administrator permissions
        if (!user_access('unl administer administrator permissions')) {
          unset($form['role_names'][$admin_role_id]);
          unset($form['role_names']['#value'][$admin_role_id]);
          unset($form['checkboxes'][$admin_role_id]);
        }

        // Make these settings unavailable even if they are enabled for the user
        $administrator_permissions = array(
          'unl administer administrator permissions',
          'unl site creation',
          'administer modules',
          'administer themes',
          'administer software updates',
          'administer imce',
          'administer filters',
        );
        foreach ($form['permission'] as $permission => $sub_form) {
          if (in_array($permission, $administrator_permissions)) {
            unset($form['permission'][$permission]);
          }
        }
        foreach ($form['checkboxes'] as $admin_role_id => $sub_form) {
          foreach ($sub_form['#options'] as $permission => $value) {
            if (in_array($permission, $administrator_permissions)) {
              unset($form['checkboxes'][$admin_role_id]['#options'][$permission]);
            }
          }
        }
        break;
      default :
        break;
    }
  }

  // Node Edit Form
  if (isset($form['#node_edit_form']) && $form['#node_edit_form']) {
    // Tidy existing html in fields that are text areas
    foreach(field_info_instances($form['#entity_type'], $form['#bundle']) as $field) {
      if (substr($field['widget']['type'], 0, 13) == 'text_textarea') {
        $field_name = $field['field_name'];
        $form[$field_name]['und'][0]['#default_value'] = unl_tidy($form[$field_name]['und'][0]['#default_value']);
      }
    }

    // Hide the "Provide a menu link" checkbox since we'll be using the menu to build a site hierarchy.
    // Instead, add a button that will determine whether or not the menu link is visible.
    $form['menu']['#title'] = 'Site hierarchy';
    $form['menu']['enabled']['#default_value'] = TRUE;
    $form['menu']['enabled']['#prefix'] = '<div style="display: none;">';
    $form['menu']['enabled']['#suffix'] = '</div>';
    $form['menu']['link']['link_title']['#required'] = TRUE;

    $mlid = $form['menu']['link']['mlid']['#value'];
    if ($mlid) {
      $menu_link = menu_link_load($mlid);
      $default_visible = ($menu_link['hidden'] ? 0 : 1);
    }
    else {
      $default_visible = 0;
    }
    $form['menu']['visible'] = array(
      '#type' => 'checkbox',
      '#title' => 'Display in menu',
      '#default_value' => $default_visible,
      '#weight' => 0,
    );

    $form['actions']['submit']['#submit'][] = 'unl_node_form_submit';

    // Also turn on revisioning
    $form['revision_information']['revision']['#default_value'] = TRUE;
    unset($form['revision_information']['revision']['#states']);
  }

  // Add the Roles checkboxes to the user edit form for users with ability to 'Administer users' but not 'Administer permissions' (Code below partially taken from user.module)
  if (in_array($form_id, array('user_register_form', 'user_profile_form')) && user_access('administer users') && !user_access('administer permissions')) {
    $roles = array_map('check_plain', user_roles(TRUE));
    // Unset the adminsitrator checkbox, validation code that prevents a user who is not an administrator from granting the administrator role is in the unl_cas module
    unset($roles[$admin_role_id]);
    $form['account']['roles']['#options'] = $roles;
    $form['account']['roles']['#access'] = !empty($roles);
  }
}

/**
 * Implements hook_node_form_submit().
 */
function unl_node_form_submit($form, &$form_state) {
  // When a node is modified, update its menu link to be hidden or not based on the user input.
  $menu_data = $form_state['values']['menu'];

  if ($menu_data['mlid']) {
    $menu_link = menu_link_load($menu_data['mlid']);
  }
  else {
    list($parent_menu_name, $parent_mlid) = explode(':', $menu_data['parent']);
    $menu_links = menu_load_links($parent_menu_name);
    foreach ($menu_links as $menu_link) {
      if ($menu_link['plid'] != $parent_mlid) {
        continue;
      }
      if ($menu_link['link_path'] != 'node/' . $form_state['values']['nid']) {
        continue;
      }
      break;
    }
  }

  $menu_link['hidden'] = $menu_data['visible'] ? 0 : 1;
  menu_link_save($menu_link);
}

/**
 * Implements hook_system_settings_form_submit().
 */
function unl_system_settings_form_submit($form, &$form_state) {
  variable_set('https', (bool) $form_state['values']['https']);
  if ($form_state['values']['unl_primary_base_url'] != '_null') {
    variable_set('unl_primary_base_url', $form_state['values']['unl_primary_base_url']);
  }
  else {
    variable_del('unl_primary_base_url');
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function unl_url_outbound_alter(&$path, &$options, $original_path) {
  $path_parts = parse_url($path);
  if (isset($path_parts['scheme']) || $path == 'user/cas') {
    return;
  }

  $user = $GLOBALS['user'];
  $user_roles = array_keys($user->roles);
  $generic_user = TRUE;
  foreach ($user_roles as $user_role) {
    if (in_array($user_role, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      continue;
    }
    $generic_user = FALSE;
  }

  if (isset($options['https'])) {
    return;
  }

  $options['https'] = (bool) (variable_get('https', 0) && !$generic_user);
}

/**
 * Custom function for implementing user_access for multiple permissions.
 * Feature request: http://drupal.org/node/216897
 */
function unl_user_access($permissions, $account = NULL) {
  foreach ($permissions as $permission) {
    if (substr($permission, 0, 1) == '!') {
      $permission = substr($permission, 1);
      $result = !user_access($permission, $account);
    }
    else {
      $result = user_access($permission, $account);
    }
    if (!$result) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Custom function for additional validation on the user_admin_role form (admin/people/permissions/roles/edit/%)
 * to prevent a user from deleting the administrator role. (This is not needed if permissions are shared and only administrators can edit roles.)
 */
function unl_user_admin_role_validate($form, &$form_state) {
  $admin_role_id = unl_shared_variable_get('user_admin_role', -1);

  if ($form_state['values']['op'] == t('Delete role')) {
    $role = user_role_load_by_name($form_state['values']['name']);
    if ($role && $role->rid == $admin_role_id) {
      form_set_error('name', t('The role name %name can not be deleted. Seriously dude. Seriously.', array('%name' => $form_state['values']['name'])));
    }
  }
}

/**
 * Custom function to sanitize user created URLs
 */
function unl_sanitize_url_part($url_part) {
  $url_part = strtolower($url_part);
  $url_part = preg_replace('/[^a-z0-9]/', '-', $url_part);
  $url_part = preg_replace('/-+/', '-', $url_part);
  $url_part = preg_replace('/(^-)|(-$)/', '', $url_part);

  return $url_part;
}

/**
 * Custom function.
 */
function unl_get_alternate_base_uris() {
  $shared_prefix = unl_get_shared_db_prefix();
  if (is_array($GLOBALS['databases']['default']['default']['prefix'])) {
    $db_prefix = $GLOBALS['databases']['default']['default']['prefix']['default'];
    $db_prefix = substr($db_prefix, 0, 0 - strlen($shared_prefix) - 1);
  }
  else {
    return array();
  }
  $rows = db_query(
    "SELECT s.uri, a.base_uri, a.path "
    . "FROM {$shared_prefix}unl_sites AS s "
    . "LEFT JOIN {$shared_prefix}unl_sites_aliases AS a "
    . "  ON s.site_id = a.site_id "
    . "WHERE db_prefix=:db_prefix",
    array(':db_prefix' => $db_prefix)
  )->fetchAll();

  if (count($rows) < 1) {
    return array();
  }

  $uris = array($rows[0]->uri);
  foreach ($rows as $row) {
    if ($row->base_uri . $row->path) {
      $uris[] = $row->base_uri . $row->path;
    }
  }

  return $uris;
}

/**
 * Implements hook_init().
 */
function unl_init() {
  // Redirect to desired URL if needed
  $primary_base_url = variable_get('unl_primary_base_url');
  if ($primary_base_url) {
    if (substr($primary_base_url, -1) != '/') {
      $primary_base_url .= '/';
    }

    $current_url_schema = parse_url(url(), PHP_URL_SCHEME);
    $primary_base_url_schema = parse_url($primary_base_url, PHP_URL_SCHEME);
    $primary_base_url = $current_url_schema . substr($primary_base_url, strlen($primary_base_url_schema));

    if (conf_path() != 'sites/default' && $primary_base_url != url() && PHP_SAPI != 'cli') {
      // Ripped off from request_path(), but without removing things like cron.php
      $request_path = strtok($_SERVER['REQUEST_URI'], '?');
      $base_path_len = strlen(rtrim(dirname($_SERVER['SCRIPT_NAME']), '\/'));
      $path = substr(urldecode($request_path), $base_path_len + 1);

      drupal_goto(url($primary_base_url . $path, array('query' => drupal_get_query_parameters())));
    }
  }

  // Insert <base> tag
  if (variable_get('unl_use_base_tag', TRUE)) {
    $base_href = url('<front>', array('absolute' => TRUE));
    if (substr($base_href, -1) != '/') {
      $base_href .= '/';
    }
    if ($GLOBALS['is_https']) {
      $base_href = str_replace('http://', 'https://', $base_href);
    }
    $base_tag = array(
      '#type' => 'html_tag',
      '#tag' => 'base',
      '#attributes' => array(
        'href' => $base_href
      ),
    );
    drupal_add_html_head($base_tag, 'base');
  }
  drupal_add_js(array('unl' => array('use_base_tag' => variable_get('unl_use_base_tag', TRUE))), 'setting');

  // Add JS
  drupal_add_js(drupal_get_path('module', 'unl') . '/unl.js', array('weight' => 50));

  // Handle unneeded index.html references
  _unl_handle_directory_index();
}

/**
 * Custom function called by unl_init() to redirect users from
 * a non-existant some/path/index.html to an existing some/path.
 */
function _unl_handle_directory_index() {
  $path = current_path();

  if (!in_array(basename($path), array('index.html', 'index.htm', 'index.shtml'))) {
    return;
  }

  if (drupal_lookup_path('source', $path)) {
    return;
  }

  if (drupal_lookup_path('source', dirname($path))) {
    drupal_goto(dirname($path));
    return;
  }

  if (dirname($path) == '.') {
    drupal_goto('<front>');
    return;
  }
}

/**
 * Custom function that outputs a simple "I'm still alive" page to check to see that drupal is working.
 */
function unl_still_alive() {
  header('Content-type: text/plain');
  echo '200 Still Alive';
}

/**
 * Custom function to return the current admin theme for use with hook_menu_alter().
 */
function _unl_get_admin_theme() {
  return variable_get('admin_theme', '0');
}

/**
 * Custom function for imce access on content administration pages since imce_user_page_access()
 * can't be used because only one file can be included in a hook_menu item ($items['admin/content/filebrowser'])
 */
function _unl_imce_file_browser_access() {
  global $user;
  $profile = imce_user_profile($user);
  return $profile['usertab'];
}

/**
 * Implements hook_stream_wrappers_alter().
 */
function unl_stream_wrappers_alter(&$wrappers) {
  if (variable_get('unl_clean_file_url')) {
    $wrappers['public']['class'] = 'UnlPublicStreamWrapper';
  }
}

class UnlPublicStreamWrapper extends DrupalPublicStreamWrapper {
  function getExternalUrl() {
    $url = $GLOBALS['base_url'];

    if (!variable_get('unl_clean_file_url')) {
      $url .= '/' . self::getDirectoryPath();
    }

    $path = str_replace('\\', '/', $this->getTarget());
    $url .= '/' . drupal_encode_path($path);
    return $url;
  }
}

/**
 * Implements hook_query_alter()
 * Currently used to filter out users with no roles at "admin/people".
 */
function unl_query_alter(QueryAlterableInterface $query) {
  // If this query is coming from the "People" admin page
  if (current_path() == 'admin/people') {
    // Find the prefix for the "users" table
    $usersTableAlias = NULL;
    foreach ($query->getTables() as $alias => $table) {
      if ($table['table'] == 'users') {
        $usersTableAlias = $alias;
      }
    }
    // If we actually find a users table
    if ($usersTableAlias) {
      // Get rid of pagination.
      // @TODO: Even though users w/o role are not returned, pagination for them does. Fix this rather than using limit.
      if ($query->hasTag('pager')) {
        $query->limit(10000);
      }
      // Join it with the users_roles tables so that only users with roles are seleceted.
      $query->join('users_roles', 'unl_distinct_prefix_r', $usersTableAlias . '.uid = unl_distinct_prefix_r.uid');
      if (!unl_user_is_administrator()) {
        $query->where('unl_distinct_prefix_r.rid != ' . unl_shared_variable_get('user_admin_role', -1));
      }
    }
  }
}

/**
 * Implements hook_filter_info()
 */
function unl_filter_info() {
  return array(
    'unl_embed' => array(
      'title' => 'UNL Node Embed',
      'description' => "Allow a node's body to be embedded into another node by using tags.",
      'process callback' => 'unl_filter_embed_process',
      'cache' => FALSE,
    ),
    'unl_ssi' => array(
      'title' => 'UNL SSI',
      'description' => 'Implements the <!--#include virtual="some/path"--> Server Side Include directive.',
      'process callback' => 'unl_filter_ssi_process',
      'cache' => FALSE,
    ),
  );
}

/**
 * Implements hook_filter_FILTER_process pseudo-hook
 *
 * Replace any instances of [[node:X]] in the $text with the content of node X's body.
 */
function unl_filter_embed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  static $processed_hashes = array();

  $text_hash = hash('sha256', $text);
  if (in_array($text_hash, array_keys($processed_hashes))) {
    // Possible recursion detected, return the cache result.
    return $processed_hashes[$text_hash];
  }

  // In case of recursion, set the cached result to this until we have the real result.
  $processed_hashes[$text_hash] = 'Error: Cannot embed a node in itself..';

  $matches = NULL;
  preg_match_all('/\[\[node:([0-9]+)\]\]/', $text, $matches);
  $node_ids = $matches[1];
  $nodes = entity_load('node', $node_ids);
  $replace_array = array();
  foreach ($node_ids as $node_id) {
    $content = node_view($nodes[$node_id]);
    $replace_array["[[node:$node_id]]"] = PHP_EOL . "<!-- Node $node_id start -->" . PHP_EOL
                                        . render($content['body'])
                                        . PHP_EOL . "<!-- Node $node_id end -->" . PHP_EOL;
  }
  $text = strtr($text, $replace_array);
  // Set the cached result to the real result.
  $processed_hashes[$text_hash] = $text;
  return $text;
}

/**
 * Implements hook_filter_FILTER_process pseudo-hook
 *
 * Replace any instances of <!--#include virtual="url"--> with the content
 * found at that URL.  If the url is in the unl.edu domain, format=partial
 * will be added to the query string.
 */
function unl_filter_ssi_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $matches = NULL;
  preg_match_all('/<!-- *#include +virtual=((".*")|(\'.*\')) *-->/', $text, $matches);

  $replacements = array();

  foreach ($matches[1] as $match_index => $match) {
    $full_match = $matches[0][$match_index];

    // Break down the URL target then rebuild it as absolute.
    $url = substr($match, 1, -1);
    $parts = parse_url($url);
    if (!isset($parts['scheme'])) {
      $parts['scheme'] = $_SERVER['HTTPS'] ? 'https' : 'http';
    }
    if (!isset($parts['host'])) {
      $parts['host'] = $_SERVER['HTTP_HOST'];
    }
    if (isset($parts['path']) && substr($parts['path'], 0, 1) != '/') {
      if (variable_get('unl_use_base_tag')) {
        $parts['path'] = $GLOBALS['base_path'] . $parts['path'];
      } else {
        $parts['path'] = $GLOBALS['base_path'] . request_path() . '/' . $parts['path'];
      }
    }
    if (!isset($parts['path'])) {
      $parts['path'] = '/';
    }
    $url = $parts['scheme'] . '://' . $parts['host'] . $parts['path'];


    // If this is a request to another UNL site, add format=partial to the query.
    if (substr($parts['host'], -7) == 'unl.edu') {
      if (isset($parts['query']) && $parts['query']) {
        $parts['query'] .= '&';
      } else {
        $parts['query'] = '';
      }
      $parts['query'] .= 'format=partial';
    }

    // Finish rebuilding the URL.
    if (isset($parts['query'])) {
      $url .= '?' . $parts['query'];
    }
    if (isset($parts['fragment'])) {
      $url .= '#' . $parts['fragment'];
    }

    $ssiDepth = 0;
    if (array_key_exists('HTTP_X_UNL_SSI_DEPTH', $_SERVER)) {
      $ssiDepth = $_SERVER['HTTP_X_UNL_SSI_DEPTH'];
    }
    $ssiDepth++;

    $context = stream_context_create(array(
      'http' => array(
        'header' => "x-unl-ssi-depth: $ssiDepth\r\n",
      ),
    ));

    if ($ssiDepth > 3) {
      watchdog('unl', 'Server Side Include: Recursion depth limit reached.', array(), WATCHDOG_ERROR);
      drupal_add_http_header('x-unl-ssi-error', 'Too deep!');
      $content = '<!-- Error: Too many recursive includes! Content from ' . $url . ' was not included! -->';
    }
    else {
      $headers = array();
      $content = unl_url_get_contents($url, $context, $headers);
      if (array_key_exists('x-unl-ssi-error', $headers)) {
        watchdog('unl', 'Server Side Include: An included URL reached the depth limit.', array(), WATCHDOG_WARNING);
        drupal_add_http_header('x-unl-ssi-error', 'The included URL caused recursion that was too deep!');
      }
    }
    $replacements[$full_match] = PHP_EOL
                               . '<!-- Begin content from ' . $url . ' -->' . PHP_EOL
                               . $content . PHP_EOL
                               . '<!-- End content from ' . $url . ' -->' . PHP_EOL;
  }

  foreach ($replacements as $from => $to) {
    $text = str_replace($from, $to, $text);
  }

  return $text;
}
